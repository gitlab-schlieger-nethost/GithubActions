name: "Build docker image and deploy to Nethost"
description: "Build docker image and deploy to Nethost"
inputs:
  DOCKER_FILE:
    description: "Value of docker build --file parameter."
    required: false
    default: "Dockerfile"
  DOCKER_FOLDER:
    description: "Root directory for docker build"
    required: false
    default: "."
  ECR_REPOSITORY:
    description: "Name of repository image"
    required: true
  EKS_DEPLOYMENT:
    description: "Name of deployment"
    required: true
  NPM_TOKEN:
    description: "NPM token"
    required: true
  KUBERNETES_APISERVER:
    description: "K8S api server url"
    required: true
  KUBERNETES_SECRET:
    description: "K8S user secret"
    required: true
  HARBOR_USERNAME:
    description: "Harbor repo username"
    required: true
  HARBOR_PASSWORD:
    description: "Harbor repo password"
    required: true
  HARBOR_HOST:
    description: "Harbor repo hostname"
    required: true

runs:
  using: "composite"
  steps:
    - name: Extract Branch Name
      shell: bash
      run: |
        BRANCH=${GITHUB_REF##*/}
        if [ "$BRANCH" = "nethost" ] ; then 
          echo "ENV=nethost" >> $GITHUB_ENV
        else
          echo "unexpected branch, exiting"
          exit 1
        fi
        
    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.HARBOR_HOST  }}
        username: ${{ inputs.HARBOR_USERNAME  }}
        password: ${{ inputs.HARBOR_PASSWORD }}

    - name: Copy .env
      shell: bash
      run: |
        if [ -e ".env.${ENV}" ]
        then
          cp -v ".env.${ENV}" .env
          cat .env
        fi


    - name: Build, tag, and push image
      shell: bash
      run: |
        # Build image 
        docker build --tag  ${{ inputs.HARBOR_HOST  }}/${{ inputs.ECR_REPOSITORY }}:${GITHUB_SHA} --build-arg NODE_AUTH_TOKEN=${{ inputs.NPM_TOKEN }} --file ${{ inputs.DOCKER_FILE }} ${{ inputs.DOCKER_FOLDER }} 
        docker image tag  ${{ inputs.HARBOR_HOST  }}/${{ inputs.ECR_REPOSITORY }}:${GITHUB_SHA}  ${{ inputs.HARBOR_HOST  }}/${{ inputs.ECR_REPOSITORY }}:${ENV}

        # Push image 
        docker push  ${{ inputs.HARBOR_HOST  }}/${{ inputs.ECR_REPOSITORY }}:${GITHUB_SHA}        
        docker push  ${{ inputs.HARBOR_HOST  }}/${{ inputs.ECR_REPOSITORY }}:${ENV}

        # Wait 30 seconds
        sleep 30

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: "v1.29.0"
      id: install

    - name: Retrieve the K8S secret from base64 and save to output
      shell: bash
      id: base64decode
      run: |
	echo "${{ inputs.KUBERNETES_SECRET }}"
        echo "{KUBERNETES_SECRET}=$(echo -n ${{ inputs.KUBERNETES_SECRET }} | base64 -w 0)" >> "$GITHUB_OUTPUT"
        echo "$GITHUB_OUTPUT"


    - name: Set the Kubernetes context
      uses: azure/k8s-set-context@v2
      with:
        method: service-account
        k8s-url: ${{ inputs.KUBERNETES_APISERVER }}
        k8s-secret: ${{ steps.base64decode.outputs.KUBERNETES_SECRET }}

    - name: Deploy image
      shell: bash
      run: |
        kubectl apply -f k8s/deployment.${ENV}.yml
        kubectl apply -f k8s/service.yml
        kubectl apply -f k8s/ingress.${ENV}.yml
        if [ -f "k8s/secret.${ENV}.yml" ]; then
          kubectl apply -f k8s/secret.${ENV}.yml
        fi

    - name: Restart rollout deployment
      shell: bash
      run: kubectl rollout restart deployment ${{ inputs.EKS_DEPLOYMENT }}
